---
- name: Install and configure Telegraf monitoring on Ubuntu 24
  hosts: ser
  become: true

  vars:
    master_node: "{{ groups['master'][0] }}"
    influxdb_url: "http://{{ hostvars[master_node]['ansible_host'] }}:8086"
    influxdb_org: "k3s-cluster"
    influxdb_bucket: "telegraf"

  tasks:
    - name: Check if running on Ubuntu
      fail:
        msg: "This playbook is designed for Ubuntu 24.04 only"
      when: ansible_distribution != "Ubuntu" or ansible_distribution_version != "24.04"

    - name: Get existing Telegraf token for this host
      shell: |
        influx auth list --json | jq -r '.[] | select(.description | contains("{{ inventory_hostname }}")) | .token'
      register: existing_token
      delegate_to: "{{ master_node }}"
      failed_when: false

    - name: Create new Telegraf token if none exists
      shell: |
        influx auth create \
          --org "{{ influxdb_org }}" \
          --all-access \
          --description "Telegraf token for {{ inventory_hostname }}"
      register: new_token_result
      delegate_to: "{{ master_node }}"
      when: existing_token.stdout == ""

    - name: Extract token from new token creation
      set_fact:
        telegraf_token: "{{ new_token_result.stdout_lines[0] | regex_search('token\\s+(\\S+)', '\\1') }}"
      when: 
        - existing_token.stdout == ""
        - new_token_result.stdout_lines is defined

    - name: Use existing token
      set_fact:
        telegraf_token: "{{ existing_token.stdout }}"
      when: existing_token.stdout != ""

    - name: Install dependencies
      apt:
        name:
          - wget
          - gpg
          - software-properties-common
          - curl
          - ca-certificates
          - smartmontools
        state: present
        update_cache: true

    - name: Add InfluxData GPG key
      shell: |
        wget -qO- https://repos.influxdata.com/influxdata-archive_compat.key | tee /etc/apt/keyrings/influxdata-archive_compat.key
      args:
        creates: /etc/apt/keyrings/influxdata-archive_compat.key

    - name: Add InfluxData APT repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/influxdata-archive_compat.key] https://repos.influxdata.com/debian stable main" > /etc/apt/sources.list.d/influxdata.list
      args:
        creates: /etc/apt/sources.list.d/influxdata.list

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Telegraf
      apt:
        name: telegraf
        state: present

    - name: Create Telegraf config
      copy:
        dest: /etc/telegraf/telegraf.conf
        content: |
          [agent]
            interval = "10s"
            round_interval = true
            metric_batch_size = 1000
            metric_buffer_limit = 10000
            collection_jitter = "0s"
            flush_interval = "10s"
            flush_jitter = "0s"
            precision = ""
            hostname = ""
            omit_hostname = false

          [[outputs.influxdb_v2]]
            urls = ["{{ influxdb_url }}"]
            token = '{{ telegraf_token }}'
            organization = "{{ influxdb_org }}"
            bucket = "{{ influxdb_bucket }}"

          [[inputs.cpu]]
            percpu = true
            totalcpu = true
            collect_cpu_time = false
            report_active = false

          [[inputs.mem]]

          [[inputs.disk]]
            ignore_fs = ["tmpfs", "devtmpfs", "devfs"]

          [[inputs.diskio]]

          [[inputs.net]]
            interfaces = ["eth0", "ens*", "enp*"]

          [[inputs.system]]

          [[inputs.swap]]

          [[inputs.netstat]]

          [[inputs.processes]]

          [[inputs.kernel]]

          [[inputs.systemd_units]]
            unittype = "service"

          [[inputs.tail]]
            files = ["/var/log/syslog"]
            from_beginning = false
            data_format = "grok"
            grok_patterns = ["%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} %{PROG:program}: %{GREEDYDATA:message}"]

          [[inputs.file]]
            files = ["/sys/class/thermal/thermal_zone*/temp"]
            name_override = "cpu_temperature"
            data_format = "value"
            data_type = "integer"

          [[inputs.exec]]
            commands = ["sensors -u | grep -E 'temp[0-9]+_input' | awk '{print $2}' | head -1"]
            name_override = "cpu_temperature_sensors"
            data_format = "value"
            data_type = "float"
            timeout = "5s"

          [[inputs.smart]]
            devices = ["/dev/sd*", "/dev/nvme*"]
            attributes = true

          [global_tags]
            host = "{{ inventory_hostname }}"

    - name: Install lm-sensors for temperature monitoring
      apt:
        name: lm-sensors
        state: present

    - name: Detect and configure sensors
      shell: sensors-detect --auto
      ignore_errors: yes

    - name: Add telegraf user to necessary groups
      user:
        name: telegraf
        groups: adm,systemd-journal,disk
        append: yes

    - name: Ensure telegraf can read system logs
      file:
        path: /var/log/syslog
        mode: '0644'
        owner: syslog
        group: adm

    - name: Create telegraf log directory
      file:
        path: /var/log/telegraf
        state: directory
        owner: telegraf
        group: telegraf
        mode: '0755'

    - name: Enable S.M.A.R.T monitoring for all drives
      shell: |
        for device in /dev/sd* /dev/nvme*; do
          if [ -b "$device" ]; then
            smartctl -s on "$device" || true
          fi
        done
      ignore_errors: yes

    # S.M.A.R.T monitoring script removed due to YAML template issues
    # This functionality is not critical for Telegraf operation

    - name: Create systemd timer for S.M.A.R.T monitoring
      copy:
        dest: /etc/systemd/system/smart-monitor.service
        content: |
          [Unit]
          Description=S.M.A.R.T Health Check
          After=multi-user.target
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/check-smart.sh
          User=root
        mode: '0644'

    - name: Create systemd timer unit
      copy:
        dest: /etc/systemd/system/smart-monitor.timer
        content: |
          [Unit]
          Description=Run S.M.A.R.T health check daily
          Requires=smart-monitor.service
          
          [Timer]
          OnCalendar=daily
          Persistent=true
          
          [Install]
          WantedBy=timers.target
        mode: '0644'

    - name: Enable and start S.M.A.R.T monitoring timer
      systemd:
        name: smart-monitor.timer
        enabled: true
        state: started
        daemon_reload: true

    - name: Restart telegraf
      systemd:
        name: telegraf
        state: restarted
        enabled: true