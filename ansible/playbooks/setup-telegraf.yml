---
- name: Install and configure Telegraf monitoring on Ubuntu 24
  hosts: ser
  become: true
  when: ansible_distribution == "Ubuntu"

  vars:
    master_node: "{{ groups['master'][0] }}"
    influxdb_url: "http://{{ hostvars[master_node]['ansible_host'] }}:8086"
    influxdb_org: "k3s-cluster"
    influxdb_bucket: "telegraf"
    influxdb_token: "{{ hostvars[master_node]['telegraf_token'] | default('') }}"

  tasks:

    - name: Install dependencies
      apt:
        name:
          - wget
          - gpg
          - software-properties-common
          - curl
          - ca-certificates
          - smartmontools
        state: present
        update_cache: true

    - name: Add InfluxData GPG key
      shell: |
        wget -qO- https://repos.influxdata.com/influxdata-archive_compat.key | tee /etc/apt/keyrings/influxdata-archive_compat.key
      args:
        creates: /etc/apt/keyrings/influxdata-archive_compat.key

    - name: Add InfluxData APT repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/influxdata-archive_compat.key] https://repos.influxdata.com/debian stable main" > /etc/apt/sources.list.d/influxdata.list
      args:
        creates: /etc/apt/sources.list.d/influxdata.list

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Telegraf
      apt:
        name: telegraf
        state: present

    - name: Create Telegraf config
      copy:
        dest: /etc/telegraf/telegraf.conf
        content: |
          [agent]
            interval = "10s"
            round_interval = true
            metric_batch_size = 1000
            metric_buffer_limit = 10000
            collection_jitter = "0s"
            flush_interval = "10s"
            flush_jitter = "0s"
            precision = ""
            hostname = ""
            omit_hostname = false

          [[outputs.influxdb_v2]]
            urls = ["{{ influxdb_url }}"]
            token = "{{ influxdb_token }}"
            organization = "{{ influxdb_org }}"
            bucket = "{{ influxdb_bucket }}"

          [[inputs.cpu]]
            percpu = true
            totalcpu = true
            collect_cpu_time = false
            report_active = false

          [[inputs.mem]]

          [[inputs.disk]]
            ignore_fs = ["tmpfs", "devtmpfs", "devfs"]

          [[inputs.diskio]]

          [[inputs.net]]
            interfaces = ["eth0", "ens*", "enp*"]

          [[inputs.system]]

          [[inputs.swap]]

          [[inputs.netstat]]

          [[inputs.processes]]

          [[inputs.kernel]]

          [[inputs.systemd_units]]
            unittype = "service"

          [[inputs.logparser]]
            files = ["/var/log/syslog"]
            from_beginning = false
            [inputs.logparser.grok]
              patterns = ["%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} %{PROG:program}: %{GREEDYDATA:message}"]
              custom_pattern_files = []
              custom_patterns = []
              timezone = "UTC"

          [[inputs.file]]
            files = ["/sys/class/thermal/thermal_zone*/temp"]
            name_override = "cpu_temperature"
            data_format = "value"
            data_type = "integer"

          [[inputs.exec]]
            commands = ["sensors -u | grep -E 'temp[0-9]+_input' | awk '{print $2}' | head -1"]
            name_override = "cpu_temperature_sensors"
            data_format = "value"
            data_type = "float"
            timeout = "5s"

          [[inputs.smart]]
            devices = ["/dev/sd*", "/dev/nvme*"]
            attributes = true
            exclude = ["/dev/sda"]

          [global_tags]
            host = "{{ inventory_hostname }}"

    - name: Install lm-sensors for temperature monitoring
      apt:
        name: lm-sensors
        state: present

    - name: Detect and configure sensors
      shell: sensors-detect --auto
      ignore_errors: yes

    - name: Add telegraf user to necessary groups
      user:
        name: telegraf
        groups: adm,systemd-journal,disk
        append: yes

    - name: Ensure telegraf can read system logs
      file:
        path: /var/log/syslog
        mode: '0644'
        owner: syslog
        group: adm

    - name: Create telegraf log directory
      file:
        path: /var/log/telegraf
        state: directory
        owner: telegraf
        group: telegraf
        mode: '0755'

    - name: Enable S.M.A.R.T monitoring for all drives
      shell: |
        for device in /dev/sd* /dev/nvme*; do
          if [ -b "$device" ]; then
            smartctl -s on "$device" || true
          fi
        done
      ignore_errors: yes

    - name: Create S.M.A.R.T monitoring script
      copy:
        dest: /usr/local/bin/check-smart.sh
        content: |
          #!/bin/bash
          # S.M.A.R.T health check script
          
          failed_devices=()
          
          for device in /dev/sd* /dev/nvme*; do
            if [ -b "$device" ]; then
              if ! smartctl -H "$device" | grep -q "PASSED"; then
                failed_devices+=("$device")
              fi
            fi
          done
          
          if [ ${#failed_devices[@]} -eq 0 ]; then
              echo "All S.M.A.R.T devices are healthy"
              exit 0
          else
              echo "S.M.A.R.T failures detected on: ${failed_devices[*]}"
              exit 1
          fi
        mode: '0755'

    - name: Create systemd timer for S.M.A.R.T monitoring
      copy:
        dest: /etc/systemd/system/smart-monitor.service
        content: |
          [Unit]
          Description=S.M.A.R.T Health Check
          After=multi-user.target
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/check-smart.sh
          User=root
        mode: '0644'

    - name: Create systemd timer unit
      copy:
        dest: /etc/systemd/system/smart-monitor.timer
        content: |
          [Unit]
          Description=Run S.M.A.R.T health check daily
          Requires=smart-monitor.service
          
          [Timer]
          OnCalendar=daily
          Persistent=true
          
          [Install]
          WantedBy=timers.target
        mode: '0644'

    - name: Enable and start S.M.A.R.T monitoring timer
      systemd:
        name: smart-monitor.timer
        enabled: true
        state: started
        daemon_reload: true

    - name: Restart telegraf
      systemd:
        name: telegraf
        state: restarted
        enabled: true